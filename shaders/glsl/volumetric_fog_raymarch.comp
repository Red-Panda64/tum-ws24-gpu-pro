#version 460
/*
    The MIT License (MIT)

    Copyright (c) 2014 bartwronski

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
*/

layout(local_size_x=8, local_size_y=8, local_size_z=1) in;

/* x,y,z: inscattering, a: extinction */
layout(rgba32f, set = 0, binding = 0) uniform readonly restrict image3D inVolume;
/* x,y,z: inscattering, a: extinction
 * both accumulated front to back
 */
layout(rgba32f, set = 0, binding = 1) uniform writeonly restrict image3D accVolume;
layout(set = 0, binding = 2) uniform VolumeGenerationInputs
{
    uvec3 resolution;
};

vec4 AccumulateScattering(in vec4 colorAndDensityFront, in vec4 colorAndDensityBack)
{
    // rgb = light in-scattered accumulated so far, a = accumulated scattering coefficient    
    vec3 light = colorAndDensityFront.rgb + clamp(exp(-colorAndDensityFront.a), 0.0, 1.0) * colorAndDensityBack.rgb;
    return vec4(light.rgb, colorAndDensityFront.a + colorAndDensityBack.a);
}

void postprocessAndStore(ivec3 imageCoords, vec4 inScatteringExtinction) {
    // replace extinction with transmittance
    inScatteringExtinction.a = clamp(exp(-inScatteringExtinction.a), 0.0, 1.0);
    imageStore(accVolume, imageCoords, inScatteringExtinction);
}

void main() {
    if(any(greaterThanEqual(gl_GlobalInvocationID.xy, resolution.xy))) {
        return;
    }

    vec4 currentSliceValue = imageLoad(inVolume, ivec3(gl_GlobalInvocationID.xy, 0)).rgba;
    //currentSliceValue = AccumulateScattering(vec4(0.0, 0.0, 0.0, 0.0), currentSliceValue);
    postprocessAndStore(ivec3(gl_GlobalInvocationID.xy, 0), currentSliceValue);

    // no gotos, no weird switch nesting -> sadly no Duff's device
    uint consecutive = resolution.z & 7;

    for (uint z = 1; z < consecutive; z++)
    {
        vec4 nextValue = imageLoad(inVolume, ivec3(gl_GlobalInvocationID.xy, z)).rgba;
        currentSliceValue = AccumulateScattering(currentSliceValue, nextValue);
        postprocessAndStore(ivec3(gl_GlobalInvocationID.xy, z), currentSliceValue);
    }

    for (uint z = consecutive; z < resolution.z; z += 8)
    {
        vec4 nextValue1 = imageLoad(inVolume, ivec3(gl_GlobalInvocationID.xy, z    )).rgba;
        vec4 nextValue2 = imageLoad(inVolume, ivec3(gl_GlobalInvocationID.xy, z + 1)).rgba;
        vec4 nextValue3 = imageLoad(inVolume, ivec3(gl_GlobalInvocationID.xy, z + 2)).rgba;
        vec4 nextValue4 = imageLoad(inVolume, ivec3(gl_GlobalInvocationID.xy, z + 3)).rgba;
        vec4 nextValue5 = imageLoad(inVolume, ivec3(gl_GlobalInvocationID.xy, z + 4)).rgba;
        vec4 nextValue6 = imageLoad(inVolume, ivec3(gl_GlobalInvocationID.xy, z + 5)).rgba;
        vec4 nextValue7 = imageLoad(inVolume, ivec3(gl_GlobalInvocationID.xy, z + 6)).rgba;
        vec4 nextValue8 = imageLoad(inVolume, ivec3(gl_GlobalInvocationID.xy, z + 7)).rgba;
 
        currentSliceValue = AccumulateScattering(currentSliceValue, nextValue1);
        postprocessAndStore(ivec3(gl_GlobalInvocationID.xy, z    ), currentSliceValue);
        currentSliceValue = AccumulateScattering(currentSliceValue, nextValue2);
        postprocessAndStore(ivec3(gl_GlobalInvocationID.xy, z + 1), currentSliceValue);
        currentSliceValue = AccumulateScattering(currentSliceValue, nextValue3);
        postprocessAndStore(ivec3(gl_GlobalInvocationID.xy, z + 2), currentSliceValue);
        currentSliceValue = AccumulateScattering(currentSliceValue, nextValue4);
        postprocessAndStore(ivec3(gl_GlobalInvocationID.xy, z + 3), currentSliceValue);
        currentSliceValue = AccumulateScattering(currentSliceValue, nextValue5);
        postprocessAndStore(ivec3(gl_GlobalInvocationID.xy, z + 4), currentSliceValue);
        currentSliceValue = AccumulateScattering(currentSliceValue, nextValue6);
        postprocessAndStore(ivec3(gl_GlobalInvocationID.xy, z + 5), currentSliceValue);
        currentSliceValue = AccumulateScattering(currentSliceValue, nextValue7);
        postprocessAndStore(ivec3(gl_GlobalInvocationID.xy, z + 6), currentSliceValue);
        currentSliceValue = AccumulateScattering(currentSliceValue, nextValue8);
        postprocessAndStore(ivec3(gl_GlobalInvocationID.xy, z + 7), currentSliceValue);
    }
}
