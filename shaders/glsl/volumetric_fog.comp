#version 460
#extension GL_GOOGLE_include_directive : enable
/*
    The MIT License (MIT)

    Copyright (c) 2014 bartwronski

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
*/
#include "util.h"

layout(local_size_x=4, local_size_y=4, local_size_z=4) in;

struct DirLight
{
    vec3 direction;
    vec3 color;
};

layout(rgba32f, set = 0, binding = 0) uniform writeonly image3D volumeOut;
layout(set = 0, binding = 1) uniform sampler3D volumeIn;

layout(set = 0, binding = 2) uniform VolumeGenerationInputs
{
    uvec3 resolution;
    vec3 cameraPos;
    vec3 cameraXAxis;
    vec3 cameraYAxis;
    vec3 cameraZAxis;
    float zNear;
    float zFar;
    mat4 prevFrameVP;
    DirLight dirLight;
    float time;
    int frameNumber;
    float historyFactor;
    float density;
    float constantDensity;
    float anisotropy;
    float absorptionFactor;
    float height;
    bool enableNoise;
};

layout(set = 0, binding = 3) uniform DirShadower
{
    mat4 lightPV;
};

layout(set = 0, binding = 4) uniform sampler2D shadowMap;
layout(set = 0, binding = 5) uniform sampler2D perlinNoise;

#include "shadow_map.h"
#include "volumetric_fog_util.h"

float noise3D(vec3 p)
{
    return texture(perlinNoise, vec2(p.x, texture(perlinNoise, p.yz))).r;
}

float perlinNoise3D(vec3 p)
{
    float x = 0.0;
    for (float i = 0.0; i < 6.0; i += 1.0)
        x += noise3D(p * pow(4.0, i)) * pow(0.5, i);
    return x;
}

float fbm(vec3 p)
{
    int numOctaves = 4;
    float lacunarity = 1.0f;
    float weight = 1.0;
    float ret = 0.0;
    float frequency = 1.0f;
    // fbm
    for (int i = 0; i < numOctaves; i++)
    {
        ret += weight * noise3D(frequency * p);
        p *= 2.0;
        weight *= 0.5;
        frequency *= lacunarity;
    }
    return clamp(ret, 0.0, 1.0);
}

float calculateDensityFunction(vec3 worldSpacePos)
{
    float heightFactor = clamp(exp(-worldSpacePos.y * height), 0.0, 1.0) * density;
    if(enableNoise) {
        float noise = fbm(worldSpacePos * 0.0025 + vec3(time, 0.0, 0.0)).r;
        noise = clamp(noise * 1.5f - 0.5f, 0.0, 1.0);
        return noise * heightFactor;
    } else {
        return heightFactor;
    }
}

const vec3 POISSON_SAMPLES[] =
{
    vec3(0.7235649381936251, 0.3138471669743047, 0.3201859810948713),
    vec3(0.9023263454488455, 0.1021536974445034, 0.7728286021842685),
    vec3(0.707535577489901, 0.7793034184152576, 0.1783810674632729),
    vec3(0.6448693804632389, 0.7572636913351743, 0.7008060842666394),
    vec3(0.5283278004896363, 0.08963895760397314, 0.6416003295537631),
    vec3(0.1945595074918383, 0.8768175519738776, 0.8383091365372217),
    vec3(0.3962390299362931, 0.5889969185665176, 0.16038235099607745),
    vec3(0.42665565633375147, 0.5199040470573899, 0.8392925000334579),
    vec3(0.016575921662339232, 0.02782739808605425, 0.6579822665975691),
    vec3(0.9053817004840065, 0.5071589150137468, 0.848557535237008),
    vec3(0.9719270337852532, 0.7932234918934737, 0.46719431136597156),
    vec3(0.18561505112152382, 0.08741559201323862, 0.24237215202068418),
    vec3(0.3361849182100367, 0.758483593873007, 0.5263712323764304),
    vec3(0.04827339058227498, 0.5292256549317347, 0.9465748311306693),
    vec3(0.9645553232327962, 0.01671040541958768, 0.37611294123403893),
    vec3(0.6720574315907052, 0.12000941884375096, 0.029772375614268987),
    vec3(0.4910912042746283, 0.9904295677963227, 0.99393447098164),
    vec3(0.021958886572755743, 0.4193473556770484, 0.36153393894970104),
};
const uint SAMPLE_NUM = POISSON_SAMPLES.length();

// https://stackoverflow.com/questions/23319289/is-there-a-good-glsl-hash-function
uint hash(uint x)
{
    x ^= x >> 16;
    x *= 0x7feb352dU;
    x ^= x >> 15;
    x *= 0x846ca68bU;
    x ^= x >> 16;
    return x;
}

uint hash3(uvec3 cell) {
    return hash(hash(hash(cell.x) ^ cell.y) ^ cell.z);
}

vec3 getSunLightingRadiance(vec3 worldPosition, vec3 viewDir, float anisotropy)
{
    float sunPhaseFunction = getPhaseFunction(dot(dirLight.direction, viewDir), anisotropy);
    return dirLight.color * sunPhaseFunction;
}

vec3 getAmbient(vec3 worldPosition, vec3 viewDir, float anisotropy)
{
    return 0.1f * dirLight.color;
}

void main() 
{
    if(any(greaterThanEqual(gl_GlobalInvocationID, resolution))) {
        return;
    }
    bool reprojectionOn = historyFactor > 0.0f;
    vec3 currFrameJitter = reprojectionOn ? (POISSON_SAMPLES[(hash(frameNumber ^ hash3(gl_GlobalInvocationID))) % SAMPLE_NUM] - 0.5f) : vec3(0.0f);

    vec3 screenCoords = ndcFromThreadID(max(vec3(gl_GlobalInvocationID) + currFrameJitter, 0.0f), resolution);
    float linearDepth = volumeZPosToDepth(screenCoords.z);
    float layerThickness = volumeZPosToDepth(screenCoords.z + 1.0f / float(resolution.z)) - linearDepth;
    layerThickness *= 0.01f;

    vec3 worldSpacePos = worldPositionFromNdcCoords(screenCoords.xy, linearDepth);

    float dustDensity = calculateDensityFunction(worldSpacePos);
    float scattering = (constantDensity + dustDensity) * layerThickness;
    float absorption = absorptionFactor * layerThickness;
    vec3 fogAlbedo = vec3(0.8f, 0.8f, 0.7f);
    vec3 viewDir = normalize(worldSpacePos - cameraPos.xyz);

    vec3 lighting = vec3(0.0f);

    float shadow = getShadowValue(lightPV, dirLight.direction, shadowMap, vec4(worldSpacePos, 1.0f), viewDir, -0.0005f);
    lighting += shadow * getSunLightingRadiance(worldSpacePos, viewDir, anisotropy);
    lighting += getAmbient(worldSpacePos, viewDir, anisotropy);
    // TODO: Add point light(s)
    //lighting += GetLocalLightsRadiance(worldSpacePos, viewDir, anisotropy);

    lighting *= fogAlbedo;

    vec4 finalOutValue = vec4(lighting * scattering, scattering + absorption);

    if(reprojectionOn) {
        vec3 ndcNoJitter = ndcFromThreadID(vec3(gl_GlobalInvocationID), resolution);
        float linearDepthNoJitter = volumeZPosToDepth(ndcNoJitter.z);
        vec3 worldSpacePosNoJitter = worldPositionFromNdcCoords(ndcNoJitter.xy, linearDepthNoJitter);
        vec4 prevFrameProjected = prevFrameVP * vec4(worldSpacePosNoJitter, 1.0);
        vec3 prevFrameNdc = prevFrameProjected.xyz / prevFrameProjected.w;
        float prevFrameLinearDepth = linearizeDepth(prevFrameNdc.z, zNear, zFar);
        vec3 uvw = vec3(prevFrameNdc.xy * 0.5f + 0.5f, depthToVolumeZPos(prevFrameLinearDepth));
        if(all(greaterThanEqual(uvw, vec3(0.0f))) && all(lessThanEqual(uvw, vec3(1.0f, 1.0f, 1.0f)))) {
            vec4 fogPrevFrame = texture(volumeIn, uvw);
            finalOutValue = mix(finalOutValue, fogPrevFrame, historyFactor);
        }
    }

    imageStore(volumeOut, ivec3(gl_GlobalInvocationID), finalOutValue);
}
