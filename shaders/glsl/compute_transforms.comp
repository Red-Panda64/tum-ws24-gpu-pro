#version 460
struct TransformData {
    vec3 pos;
    vec4 rotationAngles;
    float scale;
};

layout(set = 0, binding = 0) buffer ModelTransforms
{
    TransformData data[];
} modelTransforms;

layout(set = 0, binding = 1) buffer ModelTransformMatrices
{
    mat4 model[];
} modelTransformMatrices;

layout(set = 0, binding = 2) uniform InstanceCount {
    uniform int instanceCount;
};

layout(local_size_x = 64) in;
void main() {
    uint id = gl_GlobalInvocationID.x;
    if(id > instanceCount) {
        return;
    }
    
    vec3 instancePos = modelTransforms.data[id].pos;
    vec3 instanceRot = modelTransforms.data[id].rotationAngles.xyz;
    float instanceScale = modelTransforms.data[id].scale;
    mat4 mx, my, mz;

	// rotate around x
	float s = sin(instanceRot.x);
	float c = cos(instanceRot.x);

	mz[0] = vec4(c, s, 0.0, 0.0);
	mz[1] = vec4(-s, c, 0.0, 0.0);
	mz[2] = vec4(0.0, 0.0, 1.0, 0.0);
	mz[3] = vec4(0.0, 0.0, 0.0, 1.0);

	// rotate around y
	s = sin(instanceRot.y);
	c = cos(instanceRot.y);

	my[0] = vec4(c, 0.0, s, 0.0);
	my[1] = vec4(0.0, 1.0, 0.0, 0.0);
	my[2] = vec4(-s, 0.0, c, 0.0);
	my[3] = vec4(0.0, 0.0, 0.0, 1.0);

	// rot around z
	s = sin(instanceRot.z);
	c = cos(instanceRot.z);

	mx[0] = vec4(1.0, 0.0, 0.0, 0.0);
	mx[1] = vec4(0.0, c, s, 0.0);
	mx[2] = vec4(0.0, -s, c, 0.0);
	mx[3] = vec4(0.0, 0.0, 0.0, 1.0);

	mat4 rotMat = mz * my * mx;
    
    mat4 translate;
	translate[0] = vec4(1.0, 0.0, 0.0, 0.0);
	translate[1] = vec4(0.0, 1.0, 0.0, 0.0);
	translate[2] = vec4(0.0, 0.0, 1.0, 0.0);
	translate[3] = vec4(instancePos.x, instancePos.y, instancePos.z, 1.0);

    mat3 scale3 = mat3(instanceScale);
    mat4 scale = mat4(scale3);

    modelTransformMatrices.model[id] = translate * rotMat * scale;
}
